sort.val="desc",sort.by.groups = FALSE,
label=T,lab.hjust = 1.5, lab.vjust = 0.5,lab.nb.digits=2)+
yscale("log10")+coord_flip()+
theme_pubclean()+rremove("legend")
FINAL_PLOT<-((A+B)/(C+D)/(E+F)/(G+H))
assign("TEXT",TEXT)
assign("FINAL_PLOT",FINAL_PLOT)
}
## SETUP
library(shiny)
library(tidyverse)
library(ggpubr)
library(patchwork)
source("./data/helper_function.R")
sequencers <- read.csv("./data/sequencers.csv")
sequencers <- sequencers %>% gather("min_max","output_Gbp",c("min_output_Gbp","max_output_Gbp")) %>%
mutate(min_max = gsub("_output_Gbp", "", min_max)) %>%
mutate(output_bp=output_Gbp*(10^9)) %>%
mutate(output_reads=ifelse(paired==1,
((output_bp/length/2)*(10^-6)),
((output_bp/length)*(10^-6)))) %>%
mutate(cost_per_lane=cost/num_lanes) %>%
mutate(output_Gbp_per_lane=output_Gbp/num_lanes) %>%
mutate(output_bp_per_lane=output_bp/num_lanes) %>%
mutate(output_reads_per_lane=output_reads/num_lanes)
## INPUT
genome_size= 1.6
read_length_choice="2 x 150"
wgs_quantity=0
wgs_coverage=30
rna_quantity=5
rna_reads=20
wgbs_quantity=0
wgbs_coverage= 20
atac_quantity=0
atac_reads=60
ddrad_quantity=0
ddrad_reads=5
OUTPUT<-helper_function(sequencers=sequencers,
genome_size=genome_size,
read_length_choice=read_length_choice,
wgs_quantity=wgs_quantity,
wgs_coverage=wgs_coverage,
rna_quantity=rna_quantity,
rna_reads=rna_reads,
wgbs_quantity=wgbs_quantity,
wgbs_coverage=wgbs_coverage,
atac_quantity=atac_quantity,
atac_reads=atac_reads,
ddrad_quantity=ddrad_quantity,
ddrad_reads=ddrad_reads)
helper_function(sequencers=sequencers,
genome_size=genome_size,
read_length_choice=read_length_choice,
wgs_quantity=wgs_quantity,
wgs_coverage=wgs_coverage,
rna_quantity=rna_quantity,
rna_reads=rna_reads,
wgbs_quantity=wgbs_quantity,
wgbs_coverage=wgbs_coverage,
atac_quantity=atac_quantity,
atac_reads=atac_reads,
ddrad_quantity=ddrad_quantity,
ddrad_reads=ddrad_reads)
## SETUP
library(shiny)
library(tidyverse)
library(ggpubr)
library(patchwork)
source("./data/helper_function.R")
sequencers <- read.csv("./data/sequencers.csv")
sequencers <- sequencers %>% gather("min_max","output_Gbp",c("min_output_Gbp","max_output_Gbp")) %>%
mutate(min_max = gsub("_output_Gbp", "", min_max)) %>%
mutate(output_bp=output_Gbp*(10^9)) %>%
mutate(output_reads=ifelse(paired==1,
((output_bp/length/2)*(10^-6)),
((output_bp/length)*(10^-6)))) %>%
mutate(cost_per_lane=cost/num_lanes) %>%
mutate(output_Gbp_per_lane=output_Gbp/num_lanes) %>%
mutate(output_bp_per_lane=output_bp/num_lanes) %>%
mutate(output_reads_per_lane=output_reads/num_lanes)
## INPUT
genome_size= 1.6
read_length_choice="2 x 150"
wgs_quantity=0
wgs_coverage=30
rna_quantity=5
rna_reads=20
wgbs_quantity=0
wgbs_coverage= 20
atac_quantity=0
atac_reads=60
ddrad_quantity=0
ddrad_reads=5
helper_function(sequencers=sequencers,
genome_size=genome_size,
read_length_choice=read_length_choice,
wgs_quantity=wgs_quantity,
wgs_coverage=wgs_coverage,
rna_quantity=rna_quantity,
rna_reads=rna_reads,
wgbs_quantity=wgbs_quantity,
wgbs_coverage=wgbs_coverage,
atac_quantity=atac_quantity,
atac_reads=atac_reads,
ddrad_quantity=ddrad_quantity,
ddrad_reads=ddrad_reads)
OUTPUT[[1]]
runApp()
runApp()
## SETUP
library(shiny)
library(tidyverse)
library(ggpubr)
library(patchwork)
source("./data/helper_function.R")
sequencers <- read.csv("./data/sequencers.csv")
sequencers <- sequencers %>% gather("min_max","output_Gbp",c("min_output_Gbp","max_output_Gbp")) %>%
mutate(min_max = gsub("_output_Gbp", "", min_max)) %>%
mutate(output_bp=output_Gbp*(10^9)) %>%
mutate(output_reads=ifelse(paired==1,
((output_bp/length/2)*(10^-6)),
((output_bp/length)*(10^-6)))) %>%
mutate(cost_per_lane=cost/num_lanes) %>%
mutate(output_Gbp_per_lane=output_Gbp/num_lanes) %>%
mutate(output_bp_per_lane=output_bp/num_lanes) %>%
mutate(output_reads_per_lane=output_reads/num_lanes)
## INPUT
genome_size= 1.6
read_length_choice="2 x 150"
wgs_quantity=0
wgs_coverage=30
rna_quantity=5
rna_reads=20
wgbs_quantity=0
wgbs_coverage= 20
atac_quantity=0
atac_reads=60
ddrad_quantity=0
ddrad_reads=5
## DOIN' SHIT
# filter out other read length options
# sequencers<-sequencers %>% filter(is.na(read_length) | read_length==read_length_choice)
# # pull out the read length variable
# read_var<-unique(sequencers$length)[!is.na(unique(sequencers$length))]
# #paired_var<-unique(sequencers$paired)[!is.na(unique(sequencers$paired))]
#
# # Calculate totals used
# wgs_total_bp<-wgs_quantity*(genome_size*(10^9)*wgs_coverage)
# rna_total_bp<-rna_quantity*(rna_reads*(10^6)*read_var)
# wgbs_total_bp<-wgbs_quantity*(genome_size*(10^9)*wgbs_coverage)
# atac_total_bp<-atac_quantity*(atac_reads*(10^6)*read_var)
# ddrad_total_bp<-ddrad_quantity*(ddrad_reads*(10^6)*read_var)
#
# total_bp<-sum(wgs_total_bp,
#               rna_total_bp,
#               wgbs_total_bp,
#               atac_total_bp,
#               ddrad_total_bp)
#
# total_Gbp<-total_bp*(10^-9)
# #total_reads<-ifelse(paired_var==1,(total_bp/read_var/2),(total_bp/read_var))
# total_reads<-(total_bp/read_var)*(10^-6)
#
# #sequencers<-sequencers %>% filter(output_Gbp>=total_Gbp)
#
# # Subtract from min/max output of each sequencer & calculate percent filled on each sequencer/lane
# sequencers<-sequencers %>%
#   # mutate(Gbp=output_Gbp-total_Gbp) %>%
#   # mutate(bp=output_bp-total_bp) %>%
#   # mutate(Reads=output_reads-total_reads) %>%
#   mutate(Percent_filled = (total_Gbp/output_Gbp)*100) %>%
#
#   # mutate(Gbp_lane=output_Gbp_per_lane-total_Gbp) %>%
#   # mutate(bp_lane=output_bp_per_lane-total_bp) %>%
#   # mutate(Reads_lane=output_reads_per_lane-total_reads) %>%
#   mutate(Percent_filled_lane = (total_Gbp/output_Gbp_per_lane)*100) %>%
#
#   mutate(Percent_filled_cost = (cost*(Percent_filled/100))) %>%
#   arrange(sequencer)
#
#
# # Subset dataframe to appropriate variables
# # output_table1<-sequencers %>%
# #   select(sequencer,num_lanes,min_max,
# #          Gbp, bp, Reads, Percent_filled,
# #          cost,Percent_filled_cost) %>%
# #   pivot_wider(id_cols = c("sequencer","num_lanes","cost"),names_from = min_max,
# #               values_from = c("Gbp","bp","Reads","Percent_filled_cost"))
# #
# # # Output Table (per lane)
# # output_table2<-sequencers %>%
# #   select(sequencer,num_lanes,min_max,
# #          Gbp_lane, bp_lane, Reads_lane, Percent_filled_lane,
# #          cost_per_lane,Percent_filled_cost) %>%
# #   pivot_wider(id_cols = c("sequencer","num_lanes","cost_per_lane"),names_from = min_max,
# #               values_from = c("Gbp_lane","bp_lane","Reads_lane","Percent_filled_cost"))
#
#
#
#
#
# ## OUTPUT
# # Print out total needed
# paste0(format(total_Gbp,scientific = F, big.mark=","), " Gbp   ",
#        format(total_bp,scientific = F, big.mark=","), " bp   ",
#        format(total_reads,scientific = F, big.mark=","), " M reads")
#
# # Print out table
# # output_table1
# #
# # output_table2
#
#
# A<-ggbarplot(sequencers,"sequencer","output_Gbp",add="mean_range",fill="sequencer",
#           xlab="",ylab="Gbp",title="Gbp Output by Sequencer",
#           sort.val="desc",sort.by.groups = FALSE,
#           label=T,lab.hjust = 1.5, lab.vjust = 0.5,lab.nb.digits=1)+
#   yscale("log10")+coord_flip()+
#   geom_hline(yintercept=total_Gbp, size=2)+
#   geom_text(aes(10,total_Gbp,label = total_Gbp, hjust = 1.5))+
#   theme_pubclean()+rremove("legend")
#
# B<-ggbarplot(sequencers,"sequencer","output_Gbp_per_lane",add="mean_range",fill="sequencer",
#           xlab="",ylab="Gbp",title = "Gbp Output per Lane",
#           sort.val="desc",sort.by.groups = FALSE,
#           label=T,lab.hjust = 1.5, lab.vjust = 0.5,lab.nb.digits=1)+
#   yscale("log10")+coord_flip()+
#   geom_hline(yintercept=total_Gbp, size=2)+
#   geom_text(aes(10,total_Gbp,label = total_Gbp, hjust = 1.5))+
#   theme_pubclean()+rremove("legend")
#
#
# C<-ggbarplot(sequencers,"sequencer","output_reads",add="mean_range",fill="sequencer",
#           xlab="",ylab="Reads (millions)",title="Millions of Reads Output by Sequencer",
#           sort.val="desc",sort.by.groups = FALSE,
#           label=T,lab.hjust = 1.5, lab.vjust = 0.5,lab.nb.digits=2)+
#   yscale("log10")+coord_flip()+
#   geom_hline(yintercept=total_reads, size=2)+
#   geom_text(aes(10,total_reads,label = total_reads, hjust = 1.5))+
#   theme_pubclean()+rremove("legend")
#
# D<-ggbarplot(sequencers,"sequencer","output_reads_per_lane",add="mean_range",fill="sequencer",
#           xlab="",ylab="Reads (millions)",title = "Millions of Reads Output per Lane",
#           sort.val="desc",sort.by.groups = FALSE,
#           label=T,lab.hjust = 1.5, lab.vjust = 0.5,lab.nb.digits=2)+
#   yscale("log10")+coord_flip()+
#   geom_hline(yintercept=total_reads, size=2)+
#   geom_text(aes(10,total_reads,label = total_reads, hjust = 1.5))+
#   theme_pubclean()+rremove("legend")
#
#
# E<-ggbarplot(sequencers,"sequencer","Percent_filled",add="mean_range",fill="sequencer",
#           xlab="",ylab="Percent Filled",title = "Amount of the Sequencer Filled",subtitle=">100% is overfilled",
#           sort.val="desc",sort.by.groups = FALSE,
#           label=T,lab.hjust = -0.5,lab.nb.digits=2)+
#   coord_flip(ylim=c(0,100))+theme_pubclean()+rremove("legend")
#
# F<-ggbarplot(sequencers,"sequencer","Percent_filled_lane",add="mean_range",fill="sequencer",
#           xlab="",ylab="Percent Filled",title = "Amount of the Sequencer Filled per Lane",subtitle=">100% is overfilled",
#           sort.val="desc",sort.by.groups = FALSE,
#           label=T,lab.hjust = -0.5, lab.nb.digits=2)+
#   coord_flip(ylim=c(0,100))+theme_pubclean()+rremove("legend")
#
#
# G<-ggbarplot(sequencers,"sequencer","cost",add="mean_range",fill="sequencer",
#           xlab="",ylab="Cost (USD)",title = "Total Cost per Flow Cell", subtitle="note: this graph does not change",
#           sort.val="desc",sort.by.groups = FALSE,
#           label=T,lab.hjust = 1.5, lab.vjust = 0.5,lab.nb.digits=2)+
#   yscale("log10")+coord_flip()+
#   theme_pubclean()+rremove("legend")
#
# H<-ggbarplot(sequencers,"sequencer","Percent_filled_cost",add="mean_range",fill="sequencer",
#           xlab="",ylab="Cost (USD)",title = "Total Cost by Percent Filled",
#           sort.val="desc",sort.by.groups = FALSE,
#           label=T,lab.hjust = 1.5, lab.vjust = 0.5,lab.nb.digits=2)+
#   yscale("log10")+coord_flip()+
#   theme_pubclean()+rremove("legend")
#
# (A+B)/(C+D)/(E+F)/(G+H)
helper_function(sequencers=sequencers,
genome_size=genome_size,
read_length_choice=read_length_choice,
wgs_quantity=wgs_quantity,
wgs_coverage=wgs_coverage,
rna_quantity=rna_quantity,
rna_reads=rna_reads,
wgbs_quantity=wgbs_quantity,
wgbs_coverage=wgbs_coverage,
atac_quantity=atac_quantity,
atac_reads=atac_reads,
ddrad_quantity=ddrad_quantity,
ddrad_reads=ddrad_reads)
runApp()
runApp("census-app")
runApp('~/Dropbox/GitHub/census-app')
runApp('~/Dropbox/GitHub/census-app')
runApp('~/Dropbox/GitHub/census-app')
runApp('~/Dropbox/GitHub/census-app')
# Load data ----
counties <- readRDS("data/counties.rds")
setwd("../census-app/")
# Load data ----
counties <- readRDS("data/counties.rds")
counties$white
runApp('~/Dropbox/GitHub/SequencingEstimator')
runApp('~/Dropbox/GitHub/SequencingEstimator')
runApp("stockVis")
runApp('~/Dropbox/GitHub/SequencingEstimator')
data<-reactive({
data<-sequencers() %>% filter(is.na(read_length) | read_length==input$read_length_choice)
data
})
runApp('~/Dropbox/GitHub/SequencingEstimator')
library(shiny)
library(tidyverse)
library(ggpubr)
library(patchwork)
# LOAD DATA
#https://www.illumina.com/systems/sequencing-platforms.html
sequencers <- read.csv("data/sequencers.csv")
setwd("~/Dropbox/GitHub/SequencingEstimator")
library(shiny)
library(tidyverse)
library(ggpubr)
library(patchwork)
# LOAD DATA
#https://www.illumina.com/systems/sequencing-platforms.html
sequencers <- read.csv("data/sequencers.csv")
sequencers <- sequencers %>% gather("min_max","output_Gbp",c("min_output_Gbp","max_output_Gbp")) %>%
mutate(min_max = gsub("_output_Gbp", "", min_max)) %>%
mutate(output_bp=output_Gbp*(10^9)) %>%
mutate(output_reads=ifelse(paired==1,
((output_bp/length/2)*(10^-6)),
((output_bp/length)*(10^-6)))) %>%
mutate(cost_per_lane=cost/num_lanes) %>%
mutate(output_Gbp_per_lane=output_Gbp/num_lanes) %>%
mutate(output_bp_per_lane=output_bp/num_lanes) %>%
mutate(output_reads_per_lane=output_reads/num_lanes)
runApp()
## SETUP
library(shiny)
library(tidyverse)
library(ggpubr)
library(patchwork)
source("./data/helper_function.R")
source("./data/helpers.R")
source("./helpers.R")
sequencers <- read.csv("./data/sequencers.csv")
sequencers <- sequencers %>% gather("min_max","output_Gbp",c("min_output_Gbp","max_output_Gbp")) %>%
mutate(min_max = gsub("_output_Gbp", "", min_max)) %>%
mutate(output_bp=output_Gbp*(10^9)) %>%
mutate(output_reads=ifelse(paired==1,
((output_bp/length/2)*(10^-6)),
((output_bp/length)*(10^-6)))) %>%
mutate(cost_per_lane=cost/num_lanes) %>%
mutate(output_Gbp_per_lane=output_Gbp/num_lanes) %>%
mutate(output_bp_per_lane=output_bp/num_lanes) %>%
mutate(output_reads_per_lane=output_reads/num_lanes)
## INPUT
genome_size= 1.6
read_length_choice="2 x 150"
wgs_quantity=0
wgs_coverage=30
rna_quantity=5
rna_reads=20
wgbs_quantity=0
wgbs_coverage= 20
atac_quantity=0
atac_reads=60
ddrad_quantity=0
ddrad_reads=5
helper_function(sequencers=sequencers,
genome_size=genome_size,
read_length_choice=read_length_choice,
wgs_quantity=wgs_quantity,
wgs_coverage=wgs_coverage,
rna_quantity=rna_quantity,
rna_reads=rna_reads,
wgbs_quantity=wgbs_quantity,
wgbs_coverage=wgbs_coverage,
atac_quantity=atac_quantity,
atac_reads=atac_reads,
ddrad_quantity=ddrad_quantity,
ddrad_reads=ddrad_reads)
OUTPUT[[1]]
OUTPUT<-helper_function(sequencers=sequencers,
genome_size=genome_size,
read_length_choice=read_length_choice,
wgs_quantity=wgs_quantity,
wgs_coverage=wgs_coverage,
rna_quantity=rna_quantity,
rna_reads=rna_reads,
wgbs_quantity=wgbs_quantity,
wgbs_coverage=wgbs_coverage,
atac_quantity=atac_quantity,
atac_reads=atac_reads,
ddrad_quantity=ddrad_quantity,
ddrad_reads=ddrad_reads)
OUTPUT[[1]]
OUTPUT[[2]]
## SETUP
library(shiny)
library(tidyverse)
library(ggpubr)
library(patchwork)
source("./helpers.R")
sequencers <- read.csv("./data/sequencers.csv")
sequencers <- sequencers %>% gather("min_max","output_Gbp",c("min_output_Gbp","max_output_Gbp")) %>%
mutate(min_max = gsub("_output_Gbp", "", min_max)) %>%
mutate(output_bp=output_Gbp*(10^9)) %>%
mutate(output_reads=ifelse(paired==1,
((output_bp/length/2)*(10^-6)),
((output_bp/length)*(10^-6)))) %>%
mutate(cost_per_lane=cost/num_lanes) %>%
mutate(output_Gbp_per_lane=output_Gbp/num_lanes) %>%
mutate(output_bp_per_lane=output_bp/num_lanes) %>%
mutate(output_reads_per_lane=output_reads/num_lanes)
## INPUT
genome_size= 1.6
read_length_choice="2 x 150"
wgs_quantity=0
wgs_coverage=30
rna_quantity=5
rna_reads=20
wgbs_quantity=0
wgbs_coverage= 20
atac_quantity=0
atac_reads=60
ddrad_quantity=0
ddrad_reads=5
helper_function(sequencers=sequencers,
genome_size=genome_size,
read_length_choice=read_length_choice,
wgs_quantity=wgs_quantity,
wgs_coverage=wgs_coverage,
rna_quantity=rna_quantity,
rna_reads=rna_reads,
wgbs_quantity=wgbs_quantity,
wgbs_coverage=wgbs_coverage,
atac_quantity=atac_quantity,
atac_reads=atac_reads,
ddrad_quantity=ddrad_quantity,
ddrad_reads=ddrad_reads)
TEXT
FINAL_PLOT
library(shiny)
library(tidyverse)
library(ggpubr)
library(patchwork)
# LOAD DATA
#https://www.illumina.com/systems/sequencing-platforms.html
sequencers <- read.csv("data/sequencers.csv")
sequencers <- sequencers %>% gather("min_max","output_Gbp",c("min_output_Gbp","max_output_Gbp")) %>%
mutate(min_max = gsub("_output_Gbp", "", min_max)) %>%
mutate(output_bp=output_Gbp*(10^9)) %>%
mutate(output_reads=ifelse(paired==1,
((output_bp/length/2)*(10^-6)),
((output_bp/length)*(10^-6)))) %>%
mutate(cost_per_lane=cost/num_lanes) %>%
mutate(output_Gbp_per_lane=output_Gbp/num_lanes) %>%
mutate(output_bp_per_lane=output_bp/num_lanes) %>%
mutate(output_reads_per_lane=output_reads/num_lanes)
runApp()
runExample("03_reactivity")
runApp()
runExample("03_reactivity")
runApp()
runApp()
runApp()
runApp()
runExample("03_reactivity")
?reactive
runApp()
runApp()
runApp()
runApp()
runApp()
paste0(format(total_Gbp(),scientific = F, big.mark=","), " Gbp \t",
format(total_bp(),scientific = F, big.mark=","), " bp \t",
format(total_reads(),scientific = F, big.mark=","), " M reads")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
paste0(format(10.00003431413, scientific=F, big.mark = ","), " Gbp ",format(10000000, scientific=F, big.mark = ","))
paste0(format(10.00003431413, scientific=F, big.mark = ","), " Gbp ",format(10000000, scientific=F, big.mark = ","), " bp")
paste0(format(10.00003431413, scientific=F, big.mark = ","), " Gbp \n",format(10000000, scientific=F, big.mark = ","), " bp")
paste0(format(10.00003431413, scientific=F, big.mark = ","), " Gbp", \t,format(10000000, scientific=F, big.mark = ","), " bp")
cat(paste0(format(10.00003431413, scientific=F, big.mark = ","), " Gbp \n",format(10000000, scientific=F, big.mark = ","), " bp"))
cat(paste0(format(10.00003431413, scientific=F, big.mark = ","), " Gbp \t",format(10000000, scientific=F, big.mark = ","), " bp"))
runApp()
runApp()
runApp()
